####################################################
# api - Application Routes Configuration
#
# Complete routes configuration reference:
#   https://docs.aahframework.org/routes-config.html
####################################################

#------------------------------------------------------------------------
# Domain and sub-domain configuration goes into section `domains { ... }`
#------------------------------------------------------------------------
domains {

  # Pick your choice of an `unique keyname` to define your domain section
  # in the routes configuration.
  # For e.g.: Domain name/ip address with port no
  localhost {
    name = "api routes"

    # aah supports multi-domain routes configuration out-of-the-box.
    # `host` used to determine domain routes for the incoming request.
    # For e.g: example.org
    host = "localhost"

    # Redirect trailing slash is to enable automatic redirection if the current
    # route can't be matched but a `route` for the path with (without)
    # the trailing slash exists.
    # Default value is `true`.
    redirect_trailing_slash = true

    # aah supports out-of-the-box `405 MethodNotAllowed` status with `Allow`
    # header as per `RFC7231`. Perfect for RESTful APIs.
    # Default value is `true`.
    method_not_allowed = true

    # aah framework supports out-of-the-box `OPTIONS` request replies.
    # User defined `OPTIONS` routes take priority over the automatic replies.
    # Perfect for RESTful APIs.
    # Default value is `true`.
    auto_options = true

    # Default auth is used when route does not have attribute `auth` defined.
    # If you don't define attribute `auth` then framework treats that route as
    # `anonymous` auth scheme.
    # Default value is empty string.
    #default_auth = ""

    

    

    #-----------------------------------------------------------------------------
    # Application routes
    # Doc: https://docs.aahframework.org/routes-config.html#section-routes
    # Doc: https://docs.aahframework.org/routes-config.html#namespace-group-routes
    #-----------------------------------------------------------------------------
    routes {
      delete_check {
        path = "/checks/delete"
        method = "POST"
        controller = "ChecksController"
        action = "DeleteCheck"
        auth = "anonymous"
      }
      get_checks {
        path = "/checks/get/all"
        method = "POST"
        controller = "ChecksController"
        action = "GetChecks"
        auth = "anonymous"
      }
      get_check_with_id {
        path = "/checks/get/id"
        method = "POST"
        controller = "ChecksController"
        action = "GetCheckWithID"
        auth = "anonymous"
      }
      get_check_with_client_and_command_id {
        path = "/checks/get/client-cmd"
        method = "POST"
        controller = "ChecksController"
        action = "GetWithClientIDAndCommandID"
        auth = "anonymous"
      }
      get_checks_between_date_client {
        path = "/checks/get/checks-date-client"
        method = "POST"
        controller = "ChecksController"
        action = "GetWithChecksBetweenDateClient"
        auth = "anonymous"
      }

      create_client {
        path = "/clients/create"
        method = "POST"
        controller = "ClientsController"
        action = "CreateClient"
        auth = "anonymous"
      }
      delete_client {
        path = "/clients/delete"
        method = "POST"
        controller = "ClientsController"
        action = "DeleteClient"
        auth = "anonymous"
      }
      edit_client {
        path = "/clients/edit"
        method = "POST"
        controller = "ClientsController"
        action = "EditClient"
        auth = "anonymous"
      }
      get_clients {
        path = "/clients/get/all"
        method = "POST"
        controller = "ClientsController"
        action = "GetClients"
        auth = "anonymous"
      }
      get_client_with_id {
        path = "/clients/get/id"
        method = "POST"
        controller = "ClientsController"
        action = "GetClientWithID"
        auth = "anonymous"
      }

      create_command {
        path = "/commands/create"
        method = "POST"
        controller = "CommandsController"
        action = "CreateCommand"
        auth = "anonymous"
      }
      delete_command {
        path = "/commands/delete"
        method = "POST"
        controller = "CommandsController"
        action = "DeleteCommand"
        auth = "anonymous"
      }
      edit_command {
        path = "/commands/edit"
        method = "POST"
        controller = "CommandsController"
        action = "EditCommand"
        auth = "anonymous"
      }
      get_commands {
        path = "/commands/get"
        method = "POST"
        controller = "CommandsController"
        action = "GetCommands"
        auth = "anonymous"
      }

      create_group {
        path = "/groups/create"
        method = "POST"
        controller = "GroupsController"
        action = "CreateGroup"
        auth = "anonymous"
      }
      delete_group {
        path = "/groups/delete/id"
        method = "POST"
        controller = "GroupsController"
        action = "DeleteGroup"
        auth = "anonymous"
      }
      delete_group_with_name {
        path = "/groups/delete/name"
        method = "POST"
        controller = "GroupsController"
        action = "DeleteGroupWithName"
        auth = "anonymous"
      }
      edit_group {
        path = "/groups/edit"
        method = "POST"
        controller = "GroupsController"
        action = "EditGroup"
        auth = "anonymous"
      }
      rename_group {
        path = "/groups/rename"
        method = "POST"
        controller = "GroupsController"
        action = "RenameGroup"
        auth = "anonymous"
      }
      get_groups {
        path = "/groups/get"
        method = "POST"
        controller = "GroupsController"
        action = "GetGroups"
        auth = "anonymous"
      }
      exists_groups {
        path = "/groups/exists"
        method = "POST"
        controller = "GroupsController"
        action = "ExistsGroup"
        auth = "anonymous"
      }

      signup_user {
        path = "/user/signup"
        method = "POST"
        controller = "UsersController"
        action = "UserSignup"
        auth = "anonymous"
      }
      login_user {
        path = "/user/login"
        method = "POST"
        controller = "UsersController"
        action = "UserLogin"
        auth = "anonymous"
      }
      info_user {
        path = "/user/info"
        method = "POST"
        controller = "UsersController"
        action = "UserInfo"
        auth = "anonymous"
      }

      #------------------------------------------------------
      # Pick an unique name, it's called `route name`,
      # used for reverse URL.
      #------------------------------------------------------
      index {
        # path is used to match incoming requests
        # It can contain `:name` - Named parameter and
        # `*name` - Catch-all parameter
        path = "/"

        # HTTP method mapping, It can be multiple `HTTP` methods with comma separated
        # Default value is `GET`, it can be lowercase or uppercase
        #method = "GET"

        # The controller to be called for mapped URL path.
        #   * `controller` attribute supports with or without package prefix. For e.g.: `v1/User` or `User`
        #   * `controller` attribute supports both naming conventions. For e.g.: `User` or `UserController`
        controller = "AppController"

        # The action/method name in the controller to be called for mapped URL path.
        # Default values are mapped based on `HTTP` method. Refer doc for more info.
        # Default action value for GET is 'Index'.
        #action = "Index"

        # Auth config attribute is used to assign auth scheme for the route.
        # If you do not this attribute then framework acquire value as follows.
        #
        #   - Inherits the parent route `auth` attribute value if present.
        #   - Inherits the `default_auth` attribute config value if defined.
        #   - Otherwise it becomes not defined.
        #
        # When routes auth attribute is not defined; two possible actions are taken:
        #   - If one or more auth schemes are defined in security.auth_schemes { ... }
        #     and routes auth attribute is not defined then framework treats that route as 403 Forbidden.
        #   - Else framework treats that route as anonymous.
        #
        # When you want to define particular route as anonymous then define
        # `auth` attribute as `anonymous`.
        # Default value is empty string.
        auth = "anonymous"

        # Max request body size for this route. If its happen to be `MultipartForm`
        # then this value ignored since `request.multipart_size` config from `aah.conf`
        # is applied.
        #
        # If this value is not provided then global `request.max_body_size` config
        # from `aah.conf` is applied. So use it for specific cases.
        # No default value, global value is applied.
        #max_body_size = "5mb"

        # Optionally you can disable Anti-CSRF check for particular route.
        # There are cases you might need this option. In-general don't disable the check.
        # Default value is `true`.
        #anti_csrf_check = false
      }

      

    } # end - routes

  } # end - localhost

} # end - domains
